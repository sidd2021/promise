//Test cases :-

/*
case 1: when promise is created executor function is called immediately


const p = new MyPromise(function (resolve, reject) {
    console.log("Hello");
});


const p1 = new Promise(function (resolve, reject) {
    console.log("Hello");
});


output:-
  Mypromise output:- Hello
  Promise output:- Hello
*/









//case 2: simple resolve reject promise based on condition

/*
const p = new MyPromise(function (resolve, reject) {
    setTimeout(function () {
        if (Math.random() > 0.5) {
            resolve("Sucess");
        }
        else {
            reject("Failure");
        }
    }, 0);
});
p.then(response => console.log(response)).catch(err => console.log(err))


const p1 = new Promise(function (resolve, reject) {
    if (Math.random() > 0.5) {
        resolve("Sucess");
    }
    else {
        reject("failure");
    }
});

p1.then(response => console.log(response)).catch(err => console.log(err))


output:-
description :- based on the random value generated by the random function
               resolve or reject promise is called
  Mypromise output:-
  Promise output:-
*/











/*
case 3 : promise chaining with all resolve promise handling scenrios

const p = new MyPromise(function (resolve, reject) {
    setTimeout(function () {
        resolve("Hello");
    }, 100);
});
p.then(function (response) {
    return new MyPromise(function (resolve, reject) {
        resolve(response + "how are you");
    });
}).then(response => console.log(response));



const p1 = new Promise(function (resolve, reject) {
    resolve("Hello");
});

p1.then(function (response) {
    return new Promise(function (resolve, reject) {
        resolve(response + "how are you");
    });
}).then(response => console.log(response));


output:-
  Mypromise output:- Hello How Are You
  Promise output:-Hello How Are You
*/









/*
case 4: second resolve method is not cause any effect

const p = new MyPromise(function (resolve, reject) {
    setTimeout(function () {
        resolve("Hello");
        resolve("How Are you");
    }, 100);
});
p.then(response => console.log(response));


const p1 = new Promise(function (resolve, reject) {
    resolve("Hello");
    resolve("Hoe Are you");
});
p1.then(response => console.log(response));



output:-
  Mypromise output:- Hello
  Promise output:-  Hello

*/








/*

case 5: rejected promise and catch handling

const p = new MyPromise(function (resolve, reject) {
    setTimeout(function () {
        reject("fail 1")
    }, 100);
});
p.catch(response => console.log(response));


const p1 = new Promise(function (resolve, reject) {
    reject("fail 2");
});
p1.catch(response => console.log(response));


output:-
  Mypromise output:- fail 1
  Promise output:- fail 2
*/
